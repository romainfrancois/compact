// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// is_compact
SEXP is_compact(SEXP x);
RcppExport SEXP _compact_is_compact(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_compact(x));
    return rcpp_result_gen;
END_RCPP
}
// compact_info
SEXP compact_info(SEXP x);
RcppExport SEXP _compact_compact_info(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compact_info(x));
    return rcpp_result_gen;
END_RCPP
}
// compact_is_expanded
SEXP compact_is_expanded(SEXP x);
RcppExport SEXP _compact_compact_is_expanded(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compact_is_expanded(x));
    return rcpp_result_gen;
END_RCPP
}
// compact_length
SEXP compact_length(SEXP x);
RcppExport SEXP _compact_compact_length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compact_length(x));
    return rcpp_result_gen;
END_RCPP
}
// compact_first
SEXP compact_first(SEXP x);
RcppExport SEXP _compact_compact_first(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compact_first(x));
    return rcpp_result_gen;
END_RCPP
}
// compact_increment
SEXP compact_increment(SEXP x);
RcppExport SEXP _compact_compact_increment(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compact_increment(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_compact_is_compact", (DL_FUNC) &_compact_is_compact, 1},
    {"_compact_compact_info", (DL_FUNC) &_compact_compact_info, 1},
    {"_compact_compact_is_expanded", (DL_FUNC) &_compact_compact_is_expanded, 1},
    {"_compact_compact_length", (DL_FUNC) &_compact_compact_length, 1},
    {"_compact_compact_first", (DL_FUNC) &_compact_compact_first, 1},
    {"_compact_compact_increment", (DL_FUNC) &_compact_compact_increment, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_compact(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
